snippet ba
before_action :${0:method}
endsnippet

snippet bt
belongs_to :${0:association}
endsnippet

snippet btp
belongs_to :${1:association}, polymorphic: true
endsnippet

snippet crw
cattr_accessor :${0:attr_names}
endsnippet

snippet clac "Create controller class"
class ${1:Model}Controller < ApplicationController
	before_action :find_${2:model}

	$0

	private
	def find_$2
		@$2 = ${3:$1}.find(params[:id]) if params[:id]
	end
end
endsnippet

snippet resources "Create resources controller class"
class ${0:$1}sController < ApplicationController
	before_action :find_${1/./\l$0/}, only: %i[show edit update destroy]

	# GET /${1/./\l$0/}s
	def index
		@${1/./\l$0/}s = ${1:$1}.all

		respond_to do |format|
			format.html # index.html.erb
			format.json { render json: @${1/./\l$0/}s }
		end
	end

	# GET /${1/./\l$0/}s/1
	def show
		respond_to do |format|
			format.html # show.html.erb
			format.json { render json: @${1/./\l$0/} }
		end
	end

	# GET /${1/./\l$0/}s/new
	def new
		@${1/./\l$0/} = ${1:$1}.new

		respond_to do |format|
			format.html # new.html.erb
			format.json { render json: @${1/./\l$0/} }
		end
	end

	# GET /${1/./\l$0/}s/1/edit
	def edit
	end

	# POST /${1/./\l$0/}s
	def create
		@${1/./\l$0/} = ${1:$1}.new(params[:${1/./\l$0/}])

		respond_to do |format|
			if @${1/./\l$0/}.save
				flash[:notice] = '${1:$1} was successfully created.'
				format.html { redirect_to(@${1/./\l$0/}) }
				format.json { render json: @${1/./\l$0/} }
			else
				format.html { render :action => "new" }
				format.json  { render json: @${1/./\l$0/}.errors, status: :unprocessable_entity }
			end
		end
	end

	# PUT /${1/./\l$0/}s/1
	def update
		respond_to do |format|
			if @${1/./\l$0/}.update(params[:${1/./\l$0/}])
				flash[:notice] = '${1:$1} was successfully updated.'
				format.html { redirect_to(@${1/./\l$0/}) }
				format.json { render json: @${1/./\l$0/} }
			else
				format.html { render :action => "edit" }
				format.json  { render json: @${1/./\l$0/}.errors, status: :unprocessable_entity }
			end
		end
	end

	# DELETE /${1/./\l$0/}s/1
	def destroy
		@${1/./\l$0/}.destroy

		respond_to do |format|
			format.html { redirect_to(${1/./\l$0/}s_url) }
			format.json { render json: :success }
		end
	end

	private
		def find_${1/./\l$0/}
			@${1/./\l$0/} = ${1:Model}.find(params[:id])
		end

end
endsnippet

snippet defcreate
def create
	@${1:model_class_name} = ${2:ModelClassName}.new($1_params)

	respond_to do |format|
		if @$1.save
			flash[:notice] = '$2 was successfully created.'
			format.html { redirect_to(@$1) }
			format.json { render json: @$1 }
		else
			format.html { render action: 'new' }
			format.json  { render json: @$1.errors, status: :unprocessable_entity }
		end
	end
end
endsnippet

snippet defdestroy
def destroy
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	@$1.destroy

	respond_to do |format|
		format.html { redirect_to($1s_url) }
		format.json  { render json: :success }
	end
end
endsnippet

snippet defedit
def edit
	@${1:model_class_name} = ${0:ModelClassName}.find(params[:id])
end
endsnippet

snippet defindex
def index
	@${1:model_class_name} = ${2:ModelClassName}.all

	respond_to do |format|
		format.html # index.html.erb
		format.json { render json: @$1 }
	end
end
endsnippet

snippet defnew
def new
	@${1:model_class_name} = ${2:ModelClassName}.new

	respond_to do |format|
		format.html # new.html.erb
		format.json { render json: @$1 }
	end
end
endsnippet

snippet defshow
def show
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])

	respond_to do |format|
		format.html # show.html.erb
		format.json { render json: @$1 }
	end
end
endsnippet

snippet defupdate
def update
	@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])

	respond_to do |format|
		if @$1.update($1_params)
			flash[:notice] = '$2 was successfully updated.'
			format.html { redirect_to(@$1) }
			format.json { render json: @$1 }
		else
			format.html { render action: 'edit' }
			format.json  { render json: @$1.errors, status: :unprocessable_entity }
		end
	end
end
endsnippet

snippet defparams
def ${1:model_class_name}_params
	params.require(:$1).permit()
end
endsnippet

snippet dele
delegate :${1:methods}, to: :${0:object}
endsnippet

snippet dele
delegate :${1:methods}, to: :${2:object}, prefix: :${3:prefix}, allow_nil: ${0:allow_nil}
endsnippet

snippet amc
alias_method_chain :${1:method_name}, :${0:feature}
endsnippet

snippet flash
flash[:${1:notice}] = '${0}'
endsnippet

snippet habtm
has_and_belongs_to_many :${1:object}, join_table: '${2:table_name}', foreign_key: '${3}_id'
endsnippet

snippet hm
has_many :${0:object}
endsnippet

snippet hmd
has_many :${1:other}s, class_name: '${2:$1}', foreign_key: '${3:$1}_id', dependent: :destroy
endsnippet

snippet hmt
has_many :${1:object}, through: :${0:object}
endsnippet

snippet ho
has_one :${0:object}
endsnippet

snippet hod
has_one :${1:object}, dependent: :${0:destroy}
endsnippet

snippet i18
I18n.t('${1:type.key}')
endsnippet

snippet ist
<%= image_submit_tag('${1:agree.png}', id: '${2:id}'${0}) %>
endsnippet

snippet log
Rails.logger.${1:debug} ${0}
endsnippet

snippet log2
RAILS_DEFAULT_LOGGER.${1:debug} ${0}
endsnippet

snippet logd
Rails.logger.debug { '${1:message}' }
endsnippet

snippet loge
Rails.logger.error { '${1:message}' }
endsnippet

snippet logf
Rails.logger.fatal { '${1:message}' }
endsnippet

snippet logi
Rails.logger.info { '${1:message}' }
endsnippet

snippet logw
Rails.logger.warn { '${1:message}' }
endsnippet

snippet mapc
${1:map}.${2:connect} '${0:controller/:action/:id}'
endsnippet

snippet mapca
${1:map}.catch_all '*${2:anything}', controller: '${3:default}', action: '${4:error}'
endsnippet

snippet mapr
${1:map}.resource :${0:resource}
endsnippet

snippet maprs
${1:map}.resources :${0:resource}
endsnippet

snippet mapwo
${1:map}.with_options ${2:controller}: '${3:thing}' do |$3|
	${0}
end
endsnippet

# Model validation
snippet vn
validates :${0:attribute}, numericality: true
endsnippet

snippet vp
validates :${0:attribute}, presence: true
endsnippet

snippet vu
validates :${0:attribute}, uniqueness: true
endsnippet

###############################
#   model callback snippets   #
###############################

# before callback
snippet mbv
before_validation :${0:method}
endsnippet

snippet mbc
before_create :${0:method}
endsnippet

snippet mbu
before_update :${0:method}
endsnippet

snippet mbs
before_save :${0:method}
endsnippet

snippet mbd
before_destroy :${0:method}
endsnippet

snippet mp "map attribute" w
map(&:${0:id})
endsnippet

snippet mrw
mattr_accessor :${0:attr_names}
endsnippet

snippet oa "order" w
order('${0:field}')
endsnippet

snippet od "order desc" w
order('${0:field} DESC')
endsnippet

snippet pa "params" w
params[:${1:id}]
endsnippet

snippet ra
render action: '${0:action}'
endsnippet

snippet ral
render action: '${1:action}', layout: '${0:layoutname}'
endsnippet

snippet sc
scope :${1:name}, -> { where(${2:field}: ${0:value}) }
endsnippet

snippet sl
scope :${1:name}, lambda do |${2:value}|
	where('${3:field = ?}', ${0:value})
end
endsnippet

###########################
#   migrations snippets   #
###########################
snippet mac
add_column :${1:table_name}, :${2:column_name}, :${0:data_type}
endsnippet

snippet mai
add_index :${1:table_name}, :${0:column_name}
endsnippet

snippet mrc
remove_column :${1:table_name}, :${0:column_name}
endsnippet

snippet mrnc
rename_column :${1:table_name}, :${2:old_column_name}, :${0:new_column_name}
endsnippet

snippet mcc
change_column :${1:table}, :${2:column}, :${0:type}
endsnippet

snippet mnc
t.${1:string} :${2:title}${3:, null: false}
endsnippet

snippet mct
create_table :${1:table_name} do |t|
	${0}
end
endsnippet

snippet migration
class `substitute( substitute(vim_snippets#Filename(), '^\d\+_', '',''), '\(_\|^\)\(.\)', '\u\2', 'g')` < ActiveRecord::Migration
	def up
		${0}
	end

	def down
	end
end
endsnippet

snippet migration
class `substitute( substitute(vim_snippets#Filename(), '^\d\+_', '',''), '\(_\|^\)\(.\)', '\u\2', 'g')` < ActiveRecord::Migration
	def change
		${0}
	end
end
endsnippet

snippet trc
t.remove :${0:column}
endsnippet

snippet tre
t.rename :${1:old_column_name}, :${2:new_column_name}
${0}
endsnippet

snippet tref
t.references :${0:model}
endsnippet

snippet tcb
t.boolean :${1:title}
${0}
endsnippet

snippet tcbi
t.binary :${1:title}, limit: ${2:2}.megabytes
${0}
endsnippet

snippet tcd
t.decimal :${1:title}, precision: ${2:10}, scale: ${3:2}
${0}
endsnippet

snippet tcda
t.date :${1:title}
${0}
endsnippet

snippet tcdt
t.datetime :${1:title}
${0}
endsnippet

snippet tcf
t.float :${1:title}
${0}
endsnippet

snippet tch
t.change :${1:name}, :${2:string}, ${3:limit}: ${4:80}
${0}
endsnippet

snippet tci
t.integer :${1:title}
${0}
endsnippet

snippet tcl
t.integer :lock_version, null: false, default: 0
${0}
endsnippet

snippet tcr
t.references :${1:taggable}, polymorphic: { default: '${2:Photo}' }
${0}
endsnippet

snippet tcs
t.string :${1:title}
${0}
endsnippet

snippet tct
t.text :${1:title}
${0}
endsnippet

snippet tcti
t.time :${1:title}
${0}
endsnippet

snippet tcts
t.timestamp :${1:title}
${0}
endsnippet

snippet tctss
t.timestamps
${0}
endsnippet

snippet whe
${1:Model}.where(${2:attr}: ${3:value})
endsnippet

snippet fi
${1:Model}.find_by(${2:attr}: ${3:value})
endsnippet

snippet rh
require 'rails_helper'

describe ${1:ClassName} do
	describe '${2:docstring}' do
		it '$3' do
			$4
		end
	end
end
endsnippet
